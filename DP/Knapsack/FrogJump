https://www.naukri.com/code360/problems/frog-jump_3621012?utm_source=striver&utm_medium=website&utm_campaign=a_zcoursetuf

### Approach to Solve the Frog Jump Problem

1. **Dynamic Programming**: The problem uses a dynamic programming approach to minimize the total energy spent by the frog while jumping across an array of heights.

2. **Memoization**: An array `t` is used to store results of subproblems to avoid redundant calculations, initializing it with `-1` to indicate uncomputed states.

3. **Recursive Function**: The `solve` function is defined to calculate the minimum energy required to reach each index `n`:
   - **Base Case**: If `n == 0`, no energy is needed (return 0).
   - **Memoization Check**: If `t[n]` is already computed, return its value.
   - **Energy Calculation**:
     - If `n` is 1, calculate energy based on the difference between the first two heights.
     - For `n >= 2`, compute the minimum energy required by considering both possible jumps (to `n-1` and `n-2`).

4. **Final Result**: The initial call to `solve` starts from the last index (`n-1`), ultimately returning the minimum energy required for the frog to reach the first position.

TC: This method efficiently computes the required result with a time complexity of O(n) and space complexity of O(n) due to the memoization array.
