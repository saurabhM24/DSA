Here’s **Approach 2** (without using an abstract class) for your notes:

---

### **Decorator Design Pattern Without Abstract Class**

This approach directly implements the `Coffee` interface in each decorator and uses composition to wrap the decorated object.

---

### **1. Component Interface**
```java
public interface Coffee {
    String getDescription();
    double getCost();
}
```

---

### **2. Concrete Component**
```java
public class SimpleCoffee implements Coffee {
    @Override
    public String getDescription() {
        return "Simple Coffee";
    }

    @Override
    public double getCost() {
        return 50.0;
    }
}
```

---

### **3. Concrete Decorators**

#### MilkDecorator
```java
public class MilkDecorator implements Coffee {
    private final Coffee coffee; // The coffee being decorated

    public MilkDecorator(Coffee coffee) {
        this.coffee = coffee;
    }

    @Override
    public String getDescription() {
        return coffee.getDescription() + ", Milk";
    }

    @Override
    public double getCost() {
        return coffee.getCost() + 10.0;
    }
}
```

#### SugarDecorator
```java
public class SugarDecorator implements Coffee {
    private final Coffee coffee; // The coffee being decorated

    public SugarDecorator(Coffee coffee) {
        this.coffee = coffee;
    }

    @Override
    public String getDescription() {
        return coffee.getDescription() + ", Sugar";
    }

    @Override
    public double getCost() {
        return coffee.getCost() + 5.0;
    }
}
```

---

### **4. Usage Example**

```java
public class Main {
    public static void main(String[] args) {
        // Create base coffee
        Coffee simpleCoffee = new SimpleCoffee();
        System.out.println(simpleCoffee.getDescription() + " = ₹" + simpleCoffee.getCost());

        // Add milk
        Coffee milkCoffee = new MilkDecorator(simpleCoffee);
        System.out.println(milkCoffee.getDescription() + " = ₹" + milkCoffee.getCost());

        // Add sugar
        Coffee fancyCoffee = new SugarDecorator(milkCoffee);
        System.out.println(fancyCoffee.getDescription() + " = ₹" + fancyCoffee.getCost());
    }
}
```

---

### **Output**
```
Simple Coffee = ₹50.0
Simple Coffee, Milk = ₹60.0
Simple Coffee, Milk, Sugar = ₹65.0
```

---

### **Key Points**

1. Each decorator directly implements the `Coffee` interface.
2. Decorators are independent and can be freely combined in any order.
3. No abstract class is required, so this design is simpler and avoids inheritance.

---

You can now use this simplified approach in your notes! Let me know if you’d like additional annotations or comparisons.
