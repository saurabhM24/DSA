https://leetcode.com/problems/unique-paths/

The `uniquePaths` function counts the number of unique paths in an \( m \times n \) grid. Hereâ€™s a summary of the approach along with its time complexity:

### Approach:
1. **Dynamic Programming Table**: Use a 2D array `dp` to store the number of unique paths from each cell.
  
2. **Base Cases**:
   - Return 0 if the current cell goes out of grid boundaries.
   - Return 1 if the current cell is the bottom-right corner (target).

3. **Memoization Check**: If the number of paths from the current cell is already computed, return that value.

4. **Recursive Exploration**:
   - Compute unique paths by moving right and down, combining results from both directions.
   - Store the total number of unique paths for the current cell in `dp`.

5. **Return Total Paths**: Initiate the calculation from the top-left corner.

### Time Complexity:
- The time complexity is \( O(m \times n) \), where \( m \) is the number of rows and \( n \) is the number of columns. 
- This is because each cell in the grid is computed once due to memoization, leading to a total of \( m \times n \) unique states being processed.

### Space Complexity:
- The space complexity is also \( O(m \times n) \) due to the storage of results in the `dp` array. If the grid size is large, this may be optimized to \( O(n) \) by using a single row array and updating it iteratively.

TC: with dp it is O(mxn)
SC: O(mxn) for dp matrix
