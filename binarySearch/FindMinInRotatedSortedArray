https://leetcode.com/problems/find-minimum-in-rotated-sorted-array/description/
NOTE: Min will always be found in unsorted part only. THis is because after rotation min is the only point 
where it less that prev and less than next as well.  Which means unsorted.

If nums[mid] > nums[high], the minimum must be in the right (unsorted) half, because the left side is sorted, so you update low = mid + 1.
Otherwise, the minimum is in the left half, as this part is unsorted or contains the pivot, so you update high = mid.
This way, you're always narrowing down to the unsorted half where the minimum lies.


class Solution {
    public int findMin(int[] nums) {
        // left to right rotation
        // next = (index + 1) % n;
        // prev = (index - 1 + n) % n 
        int n = nums.length;

        if (nums[0] <= nums[n-1])
            return nums[0];

        int l = 0, r = n - 1;
        int mid, next, prev;


        while (l <= r) {
            mid = l + (r - l)/2;

            next = (mid + 1) % n;
            prev = (mid - 1 + n) % n;

            if (nums[mid] < nums[prev] && nums[mid] < nums[next])
                return nums[mid];
            else if (nums[mid] > nums[r]) // the right side is unsorted
                l = mid + 1;
            else
                r = mid - 1;    
        }

        return 0;
    }
}
