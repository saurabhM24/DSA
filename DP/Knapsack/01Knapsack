import java.util.HashMap;

public class Knapsack {

    // Recursive function with memoization
    public static int knapsack(int[] weights, int[] values, int capacity, int n, HashMap<String, Integer> memo) {
        // Base case: no items or no capacity
        if (n == 0 || capacity == 0) {
            return 0;
        }

        // Check if the result is already computed
        String key = n + "-" + capacity;
        if (memo.containsKey(key)) {
            return memo.get(key);
        }

        // If the weight of the current item is more than the capacity, skip it
        if (weights[n - 1] > capacity) {
            memo.put(key, knapsack(weights, values, capacity, n - 1, memo));
        } else {
            // Include the current item or exclude it
            int include = values[n - 1] + knapsack(weights, values, capacity - weights[n - 1], n - 1, memo);
            int exclude = knapsack(weights, values, capacity, n - 1, memo);
            memo.put(key, Math.max(include, exclude));
        }

        return memo.get(key);
    }

    public static void main(String[] args) {
        int[] weights = {1, 2, 3};
        int[] values = {10, 15, 40};
        int capacity = 6;
        int n = weights.length;
        
        HashMap<String, Integer> memo = new HashMap<>();
        int result = knapsack(weights, values, capacity, n, memo);
        
        System.out.println("Maximum value in Knapsack: " + result);  // Output: 55
    }
}
