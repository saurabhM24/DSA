Certainly! The Unbounded Knapsack problem allows you to use an item multiple times, and we can solve it using a recursive approach with memoization. Here's how you can implement it in Java using a memoization matrix.

### Unbounded Knapsack Code Using Recursion and Memoization in Java

```java
import java.util.HashMap;

public class UnboundedKnapsack {
    
    // Recursive function with memoization
    public static int unboundedKnapsack(int[] weights, int[] values, int capacity, int n, Integer[][] memo) {
        // Base case: no items or no capacity
        if (capacity == 0) {
            return 0;
        }
        
        // Check if the result is already computed
        if (memo[n][capacity] != null) {
            return memo[n][capacity];
        }

        // If no items left
        if (n == 0) {
            return 0;
        }

        // If the weight of the current item is more than the capacity, skip it
        if (weights[n - 1] > capacity) {
            memo[n][capacity] = unboundedKnapsack(weights, values, capacity, n - 1, memo);
        } else {
            // Include the current item (use it multiple times) or exclude it
            int include = values[n - 1] + unboundedKnapsack(weights, values, capacity - weights[n - 1], n, memo);
            int exclude = unboundedKnapsack(weights, values, capacity, n - 1, memo);
            memo[n][capacity] = Math.max(include, exclude);
        }

        return memo[n][capacity];
    }

    public static void main(String[] args) {
        int[] weights = {1, 3, 4};
        int[] values = {10, 40, 50};
        int capacity = 8;
        int n = weights.length;
        
        // Memoization table
        Integer[][] memo = new Integer[n + 1][capacity + 1];
        
        int result = unboundedKnapsack(weights, values, capacity, n, memo);
        
        System.out.println("Maximum value in Unbounded Knapsack: " + result);  // Output: 80
    }
}
```

### Explanation:

1. **Function Definition**:
   - The `unboundedKnapsack` function takes the weights and values arrays, the current capacity, the number of items \( n \), and a memoization matrix.

2. **Base Case**:
   - If the capacity is zero, the maximum value is 0.
   - If there are no items left, the maximum value is also 0.

3. **Memoization Check**:
   - Before computing a result, we check if it has already been computed using the memoization matrix.

4. **Include/Exclude Logic**:
   - If the current item's weight exceeds the capacity, we skip it and check the result for the remaining items.
   - If the item can be included, we calculate the value for both including it (allowing for multiple uses) and excluding it, taking the maximum of the two.

5. **Memoization Storage**:
   - Store the result in the memoization matrix before returning.

### Complexity:
- **Time Complexity**: \( O(n \times k) \), where \( n \) is the number of items and \( k \) is the capacity.
- **Space Complexity**: \( O(n \times k) \) due to the memoization matrix.
